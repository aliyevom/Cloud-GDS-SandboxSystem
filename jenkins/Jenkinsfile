

pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "gds-image:${env.BUILD_NUMBER}"
        KUBE_NAMESPACE = "gds"
        XCODE_PROJECT = "ios_app/App/App.xcodeproj"
        XCODE_SCHEME = "SandboxInternal"
        XCODE_DESTINATION = "platform=iOS Simulator,name=iPhone 12"
        GIT_REPO = "https://github.com/aliyevom/Cloud-GDS-SandboxSystem"
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "Initializing build environment..."
                    // Any initialization steps go here
                }
            }
        }

        stage('Checkout') {
            steps {
                git url: env.GIT_REPO
            }
        }

        stage('Build and Test on Xcode Cloud') {
            parallel {
                stage('Build on Xcode Cloud') {
                    steps {
                        script {
                            triggerXcodeCloudWorkflow()
                        }
                    }
                }
                stage('Test on Xcode Cloud') {
                    steps {
                        script {
                            retrieveAndProcessXcodeTestResults()
                        }
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    echo "Building Docker image..."
                    docker.build(env.DOCKER_IMAGE)
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    echo "Pushing Docker image to registry..."
                    docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-credentials-id') {
                        docker.image(env.DOCKER_IMAGE).push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "Deploying to Kubernetes..."
                    sh 'kubectl apply -f kubernetes/'
                }
            }
        }
    }

    post {
        always {
            script {
                echo "Cleaning workspace..."
                cleanWs()
            }
        }

        success {
            script {
                notifySlack("SUCCESS: Build ${env.BUILD_NUMBER} completed successfully.")
            }
        }

        failure {
            script {
                notifySlack("FAILURE: Build ${env.BUILD_NUMBER} failed. Check the logs for details.")
            }
        }

        unstable {
            script {
                notifySlack("UNSTABLE: Build ${env.BUILD_NUMBER} completed with some issues.")
            }
        }
    }
}

def triggerXcodeCloudWorkflow() {
    echo "Triggering Xcode Cloud workflow..."
    // Implement the logic to trigger Xcode Cloud workflow
    // You may use APIs or command line tools to interact with Xcode Cloud
}

def retrieveAndProcessXcodeTestResults() {
    echo "Retrieving and processing Xcode test results..."
    // Implement the logic to retrieve test results from Xcode Cloud
    // Parse and process results, possibly marking the build as unstable if some tests fail
    sh '''
    # Example command to fetch and parse test results
    xcodebuild test -project $XCODE_PROJECT -scheme $XCODE_SCHEME -destination "$XCODE_DESTINATION" | tee test-results.log | xcpretty --report html --output reports/test-report.html
    '''
    archiveArtifacts artifacts: 'reports/test-report.html', allowEmptyArchive: true
    junit 'reports/test-report.html'
}

def notifySlack(String message) {
    echo "Sending notification to Slack..."
    slackSend(channel: '#builds', color: '#00FF00', message: message, webhookUrl: env.SLACK_WEBHOOK)
}
